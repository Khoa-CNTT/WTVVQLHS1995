import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './DashboardPage.module.css';
import UsersManagerPage from './UsersManager/UsersManager';
import authService from '../../services/authService';
import 'animate.css';
import LegalDocumentsManager from './LegalDocuments/LegalDocumentsManager';
import DocumentTemplatesManager from './DocumentTemplates/DocumentTemplatesManager';
import UserMenuPortal from './components/UserMenuPortal';

function Dashboard() {
  const navigate = useNavigate();
  const [activeMenu, setActiveMenu] = useState('t·ªïng-quan');
  const [statCounts, setStatCounts] = useState({
    documents: 0,
    cases: 0,
    appointments: 0,
    contracts: 0
  });
  const [notifications, setNotifications] = useState(3);
  const [menuVisible, setMenuVisible] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  const [userMenuOpen, setUserMenuOpen] = useState(false);
  const userMenuTimeoutRef = useRef(null);
  const userAvatarRef = useRef(null);
  const userDropdownRef = useRef(null);
  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, right: 0 });

  useEffect(() => {
    const user = authService.getCurrentUser();
    if (!user) {
      navigate('/login');
      return;
    }
    setCurrentUser(user);

    const targetCounts = { documents: 15, cases: 5, appointments: 3, contracts: 2 };
    const duration = 1500;
    const frameDuration = 1000 / 60;
    const totalFrames = Math.round(duration / frameDuration);

    let frame = 0;
    const timer = setInterval(() => {
      frame++;
      const progress = frame / totalFrames;
      setStatCounts(Object.fromEntries(
        Object.keys(targetCounts).map(key => [key, Math.floor(progress * targetCounts[key])])
      ));
      if (frame === totalFrames) {
        setStatCounts(targetCounts);
        clearInterval(timer);
      }
    }, frameDuration);

    return () => clearInterval(timer);
  }, [navigate]);

  useEffect(() => {
    if (userMenuOpen && userAvatarRef.current) {
      const rect = userAvatarRef.current.getBoundingClientRect();
      
      // Kho·∫£ng c√°ch t·ª´ avatar ƒë·∫øn menu
      const verticalGap = 10;
      
      setDropdownPosition({
        top: rect.bottom + verticalGap,
        right: window.innerWidth - rect.right + (rect.width / 2 - 110) // CƒÉn ch·ªânh ƒë·ªÉ m≈©i t√™n tr·ªè ƒë·∫øn avatar
      });
    }
  }, [userMenuOpen]);

  const goToHomePage = () => navigate('/');
  const handleLogout = () => {
    authService.logout();
    navigate('/login');
  };
  const toggleSidebar = () => setMenuVisible(!menuVisible);
  const toggleUserMenu = () => setUserMenuOpen(!userMenuOpen);
  const goToProfilePage = () => navigate('/profile');

  const handleUserMenuMouseEnter = () => {
    if (userMenuTimeoutRef.current) {
      clearTimeout(userMenuTimeoutRef.current);
      userMenuTimeoutRef.current = null;
    }
  };

  const handleUserMenuMouseLeave = () => {
    userMenuTimeoutRef.current = setTimeout(() => {
      setUserMenuOpen(false);
    }, 500);
  };

  const menuItems = [
    { id: 't·ªïng-quan', label: 'T·ªïng Quan', icon: '‚öñÔ∏è' },
    { id: 'ng∆∞·ªùi-d√πng', label: 'T√†i Kho·∫£n', icon: 'üë®‚Äç‚öñÔ∏è', table: 'Users, UserProfiles' },
    { id: 't√†i-li·ªáu-ph√°p-l√Ω', label: 'T√†i Li·ªáu Ph√°p L√Ω', icon: 'üìú', table: 'LegalDocuments, DocumentTemplates' },
    { id: 'v·ª•-√°n', label: 'M·∫´u vƒÉn b·∫£n', icon: 'üèõÔ∏è', table: 'LegalCases' },
    { id: 'h·ª£p-ƒë·ªìng', label: 'H·ª£p ƒê·ªìng', icon: 'üìã', table: 'Contracts, DigitalSignatures' },
    { id: 't∆∞-v·∫•n-ai', label: 'T∆∞ V·∫•n AI', icon: 'ü§ñ', table: 'AIConsultations' },
    { id: 'tin-nh·∫Øn', label: 'Tin Nh·∫Øn', icon: 'üí¨', table: 'LiveChats' },
    { id: 'giao-d·ªãch', label: 'Giao D·ªãch', icon: 'üí∞', table: 'Transactions, FeeReferences' }
  ];

  const userMenuItems = [
    { icon: 'üè†', label: 'Trang ch·ªß', onClick: () => navigate('/') },
    { icon: 'üë§', label: 'H·ªì s∆°', onClick: goToProfilePage },
    { icon: 'üö™', label: 'ƒêƒÉng xu·∫•t', onClick: handleLogout }
  ];

  const renderDashboardOverview = () => (
    <div className={`${styles.contentSection} animate__animated animate__fadeIn`}>
      <h2 className={styles.sectionTitle}>T·ªïng Quan Ho·∫°t ƒê·ªông</h2>
      <div className={styles.legalQuote}>
        "C√¥ng l√Ω kh√¥ng ch·ªâ ph·∫£i ƒë∆∞·ª£c th·ª±c thi, m√† c√≤n ph·∫£i ƒë∆∞·ª£c nh√¨n th·∫•y l√† ƒëang ƒë∆∞·ª£c th·ª±c thi"
      </div>
      <div className={styles.cardGrid}>
        {[
          { icon: 'üìÑ', title: 'T√†i Li·ªáu Ph√°p L√Ω', stat: statCounts.documents, desc: 't√†i li·ªáu m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t', subDesc: 'VƒÉn b·∫£n, lu·∫≠t, ngh·ªã ƒë·ªãnh, m·∫´u h·ª£p ƒë·ªìng', menu: 't√†i-li·ªáu-ph√°p-l√Ω' },
          { icon: '‚öñÔ∏è', title: 'V·ª• √Ån ƒêang X·ª≠ L√Ω', stat: statCounts.cases, desc: 'v·ª• √°n ƒëang ch·ªù x·ª≠ l√Ω', subDesc: 'C√°c v·ª• √°n ph√°p l√Ω ƒëang ƒë∆∞·ª£c theo d√µi v√† x·ª≠ l√Ω', menu: 'v·ª•-√°n' },
          { icon: 'üìÖ', title: 'L·ªãch H·∫πn S·∫Øp T·ªõi', stat: statCounts.appointments, desc: 'cu·ªôc h·∫πn trong tu·∫ßn n√†y', subDesc: 'C√°c cu·ªôc h·∫πn t∆∞ v·∫•n v·ªõi lu·∫≠t s∆∞ ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·ªãch', menu: 'l·ªãch-h·∫πn' },
          { icon: 'üìã', title: 'H·ª£p ƒê·ªìng M·ªõi', stat: statCounts.contracts, desc: 'h·ª£p ƒë·ªìng c·∫ßn xem x√©t', subDesc: 'C√°c h·ª£p ƒë·ªìng m·ªõi c·∫ßn xem x√©t v√† k√Ω k·∫øt', menu: 'h·ª£p-ƒë·ªìng' }
        ].map(({ icon, title, stat, desc, subDesc, menu }, index) => (
          <div key={index} className={styles.card}>
            <div className={styles.cardTitle}>
              <span className={styles.legalIcon}>{icon}</span>
              {title}
            </div>
            <div className={styles.cardContent}>
              <p><span className={styles.statNumber}>{stat}</span> {desc}</p>
              <small>{subDesc}</small>
            </div>
            <button className={styles.actionButton} onClick={() => setActiveMenu(menu)}>
              Xem Chi Ti·∫øt <span>‚Üí</span>
            </button>
          </div>
        ))}
      </div>
      <div className={styles.legalDivider}></div>
      <h2 className={styles.sectionTitle}>Ho·∫°t ƒê·ªông G·∫ßn ƒê√¢y</h2>
      <div className={styles.recentActivities}>
        {[
          { icon: 'üìù', title: 'T√†i li·ªáu ph√°p l√Ω "Lu·∫≠t doanh nghi·ªáp 2023" ƒë∆∞·ª£c th√™m v√†o', time: '2 gi·ªù tr∆∞·ªõc' },
          { icon: 'üë®‚Äç‚öñÔ∏è', title: 'Cu·ªôc h·∫πn v·ªõi Lu·∫≠t s∆∞ Nguy·ªÖn VƒÉn A v·ªÅ v·ª• √°n kinh doanh', time: 'H√¥m qua, 15:30' },
          { icon: 'üí∞', title: 'Giao d·ªãch thanh to√°n t∆∞ v·∫•n lu·∫≠t s∆∞ ho√†n t·∫•t - 2.500.000ƒë', time: '3 ng√†y tr∆∞·ªõc' },
          { icon: 'üìã', title: 'H·ª£p ƒë·ªìng mua b√°n ƒë√£ ƒë∆∞·ª£c k√Ω k·∫øt v·ªõi ch·ªØ k√Ω ƒëi·ªán t·ª≠', time: '5 ng√†y tr∆∞·ªõc' }
        ].map(({ icon, title, time }, index) => (
          <div key={index} className={`${styles.activityItem} animate__animated animate__slideInUp`} style={{ animationDelay: `${index * 0.1}s` }}>
            <span className={styles.activityIcon}>{icon}</span>
            <div className={styles.activityContent}>
              <div className={styles.activityTitle}>{title}</div>
              <div className={styles.activityTime}>{time}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderUserProfile = () => (
    <div className={`${styles.contentSection} animate__animated animate__fadeIn`}>
      <h2 className={styles.sectionTitle}>Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng</h2>
      <UsersManagerPage />
    </div>
  );

  const renderLegalDocuments = () => (
    <div className={`${styles.contentSection} animate__animated animate__fadeIn`}>
      <h2 className={styles.sectionTitle}>Qu·∫£n l√Ω t√†i li·ªáu ph√°p l√Ω</h2>
      <LegalDocumentsManager />
    </div>
  );

  const renderDocumentTemplates = () => (
    <div className={`${styles.contentSection} animate__animated animate__fadeIn`}>
      <h2 className={styles.sectionTitle}>Qu·∫£n l√Ω m·∫´u vƒÉn b·∫£n</h2>
      <DocumentTemplatesManager />
    </div>
  );

  const renderContent = () => {
    const sections = {
      't·ªïng-quan': renderDashboardOverview(),
      'ng∆∞·ªùi-d√πng': renderUserProfile(),
      't√†i-li·ªáu-ph√°p-l√Ω': renderLegalDocuments(),
      'v·ª•-√°n': renderDocumentTemplates(),
      'h·ª£p-ƒë·ªìng': <h2 className={styles.sectionTitle}>Qu·∫£n L√Ω H·ª£p ƒê·ªìng</h2>,
      't∆∞-v·∫•n-ai': <h2 className={styles.sectionTitle}>T∆∞ V·∫•n AI</h2>,
      'tin-nh·∫Øn': <h2 className={styles.sectionTitle}>Tin Nh·∫Øn</h2>,
      'giao-d·ªãch': <h2 className={styles.sectionTitle}>Giao D·ªãch</h2>
    };
    return (
      <div className={styles.contentSection}>
        {sections[activeMenu] || 'Ch·ªçn m·ªôt m·ª•c t·ª´ menu'}
      </div>
    );
  };

  const getCurrentDate = () => new Date().toLocaleDateString('vi-VN', {
    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
  });

  const getUserInitials = () => {
    if (currentUser?.fullName) {
      const nameParts = currentUser.fullName.split(' ');
      return nameParts.length > 1
        ? `${nameParts[0].charAt(0)}${nameParts[nameParts.length - 1].charAt(0)}`.toUpperCase()
        : currentUser.fullName.charAt(0).toUpperCase();
    }
    return currentUser?.username?.substring(0, 2).toUpperCase() || 'ND';
  };

  return (
    <div className={`${styles.dashboardContainer} ${!menuVisible ? styles.sidebarCollapsed : ''}`}>
      <div className={`${styles.sidebar} ${!menuVisible ? styles.sidebarCollapsed : ''}`}>
        <div className={styles.logoContainer} onClick={goToHomePage} title="V·ªÅ trang ch·ªß">
          <h2>LegAI</h2>
        </div>
        <div className={styles.menuContainer}>
          {menuItems.map(item => (
            <div
              key={item.id}
              className={`${styles.menuItem} ${activeMenu === item.id ? styles.active : ''} animate__animated animate__fadeIn`}
              onClick={() => setActiveMenu(item.id)}
              title={item.table ? `B·∫£ng d·ªØ li·ªáu: ${item.table}` : item.label}
            >
              <span className={styles.menuIcon}>{item.icon}</span>
              {menuVisible && <span className={styles.menuLabel}>{item.label}</span>}
            </div>
          ))}
        </div>
        <div className={styles.logoutContainer}>
          <button className={styles.logoutButton} onClick={handleLogout}>
            üö™ {menuVisible ? 'ƒêƒÉng xu·∫•t' : ''}
          </button>
        </div>
      </div>
      <button className={styles.menuToggle} onClick={toggleSidebar}>
        {menuVisible ? '‚óÄ' : '‚ñ∂'}
      </button>
      <div className={styles.mainContent}>
        <div className={`${styles.header} animate__animated animate__fadeInDown`}>
          <div>
            <h1>H·ªÜ TH·ªêNG QU·∫¢N L√ù PH√ÅP L√ù</h1>
            <div className={styles.currentDate}>{getCurrentDate()}</div>
          </div>
          <div className={styles.userInfo}>
            <div className={styles.notifications}>
              <span className={styles.notificationIcon}>üîî</span>
              {notifications > 0 && <span className={styles.notificationBadge}>{notifications}</span>}
            </div>
            <span className={styles.userName}>{currentUser?.fullName || currentUser?.username || 'NG∆Ø·ªúI D√ôNG'}</span>
            <div 
              ref={userAvatarRef}
              className={styles.userAvatar} 
              onClick={toggleUserMenu}
              onMouseEnter={handleUserMenuMouseEnter}
              onMouseLeave={handleUserMenuMouseLeave}
            >
              {getUserInitials()}
            </div>
            
            <UserMenuPortal 
              isOpen={userMenuOpen}
              position={dropdownPosition}
              onMouseEnter={handleUserMenuMouseEnter}
              onMouseLeave={handleUserMenuMouseLeave}
              onClose={() => setUserMenuOpen(false)}
              items={userMenuItems}
            />
          </div>
        </div>
        <div className={styles.contentWrapper}>
          {renderContent()}
        </div>
      </div>
    </div>
  );
}

export default Dashboard;